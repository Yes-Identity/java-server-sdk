/*
 * Yes Identity
 * Welcome to Yes Identity API documentation.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.yesidentity.sdk.api;

import com.yesidentity.sdk.invoker.ApiCallback;
import com.yesidentity.sdk.invoker.ApiClient;
import com.yesidentity.sdk.invoker.ApiException;
import com.yesidentity.sdk.invoker.ApiResponse;
import com.yesidentity.sdk.invoker.Configuration;
import com.yesidentity.sdk.invoker.Pair;
import com.yesidentity.sdk.invoker.ProgressRequestBody;
import com.yesidentity.sdk.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.yesidentity.sdk.model.AuthenticationRequestModel;
import com.yesidentity.sdk.model.ErrorResponseModel;
import com.yesidentity.sdk.model.InlineObjectModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthenticationRequestsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthenticationRequestsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthenticationRequestsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for approveAuthenticationRequest
     * @param deviceId Device id (required)
     * @param authReqId Authentication request id (required)
     * @param inlineObjectModel  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call approveAuthenticationRequestCall(String deviceId, String authReqId, InlineObjectModel inlineObjectModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inlineObjectModel;

        // create path and map variables
        String localVarPath = "/v1/devices/{device_id}/authentication-requests/{auth_req_id}/approve"
            .replaceAll("\\{" + "device_id" + "\\}", localVarApiClient.escapeString(deviceId.toString()))
            .replaceAll("\\{" + "auth_req_id" + "\\}", localVarApiClient.escapeString(authReqId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call approveAuthenticationRequestValidateBeforeCall(String deviceId, String authReqId, InlineObjectModel inlineObjectModel, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling approveAuthenticationRequest(Async)");
        }
        
        // verify the required parameter 'authReqId' is set
        if (authReqId == null) {
            throw new ApiException("Missing the required parameter 'authReqId' when calling approveAuthenticationRequest(Async)");
        }
        

        okhttp3.Call localVarCall = approveAuthenticationRequestCall(deviceId, authReqId, inlineObjectModel, _callback);
        return localVarCall;

    }

    /**
     * Approve Authentication Request
     * Approve Authentication Request
     * @param deviceId Device id (required)
     * @param authReqId Authentication request id (required)
     * @param inlineObjectModel  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void approveAuthenticationRequest(String deviceId, String authReqId, InlineObjectModel inlineObjectModel) throws ApiException {
        approveAuthenticationRequestWithHttpInfo(deviceId, authReqId, inlineObjectModel);
    }

    /**
     * Approve Authentication Request
     * Approve Authentication Request
     * @param deviceId Device id (required)
     * @param authReqId Authentication request id (required)
     * @param inlineObjectModel  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> approveAuthenticationRequestWithHttpInfo(String deviceId, String authReqId, InlineObjectModel inlineObjectModel) throws ApiException {
        okhttp3.Call localVarCall = approveAuthenticationRequestValidateBeforeCall(deviceId, authReqId, inlineObjectModel, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Approve Authentication Request (asynchronously)
     * Approve Authentication Request
     * @param deviceId Device id (required)
     * @param authReqId Authentication request id (required)
     * @param inlineObjectModel  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call approveAuthenticationRequestAsync(String deviceId, String authReqId, InlineObjectModel inlineObjectModel, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = approveAuthenticationRequestValidateBeforeCall(deviceId, authReqId, inlineObjectModel, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for denyAuthenticationRequest
     * @param deviceId Device id (required)
     * @param authReqId Authentication request id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call denyAuthenticationRequestCall(String deviceId, String authReqId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/devices/{device_id}/authentication-requests/{auth_req_id}/deny"
            .replaceAll("\\{" + "device_id" + "\\}", localVarApiClient.escapeString(deviceId.toString()))
            .replaceAll("\\{" + "auth_req_id" + "\\}", localVarApiClient.escapeString(authReqId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call denyAuthenticationRequestValidateBeforeCall(String deviceId, String authReqId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling denyAuthenticationRequest(Async)");
        }
        
        // verify the required parameter 'authReqId' is set
        if (authReqId == null) {
            throw new ApiException("Missing the required parameter 'authReqId' when calling denyAuthenticationRequest(Async)");
        }
        

        okhttp3.Call localVarCall = denyAuthenticationRequestCall(deviceId, authReqId, _callback);
        return localVarCall;

    }

    /**
     * Deny Authentication Request
     * Deny Authentication Request
     * @param deviceId Device id (required)
     * @param authReqId Authentication request id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void denyAuthenticationRequest(String deviceId, String authReqId) throws ApiException {
        denyAuthenticationRequestWithHttpInfo(deviceId, authReqId);
    }

    /**
     * Deny Authentication Request
     * Deny Authentication Request
     * @param deviceId Device id (required)
     * @param authReqId Authentication request id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> denyAuthenticationRequestWithHttpInfo(String deviceId, String authReqId) throws ApiException {
        okhttp3.Call localVarCall = denyAuthenticationRequestValidateBeforeCall(deviceId, authReqId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deny Authentication Request (asynchronously)
     * Deny Authentication Request
     * @param deviceId Device id (required)
     * @param authReqId Authentication request id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call denyAuthenticationRequestAsync(String deviceId, String authReqId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = denyAuthenticationRequestValidateBeforeCall(deviceId, authReqId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAuthenticationRequest
     * @param deviceId Device id (required)
     * @param authReqId Authentication request id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAuthenticationRequestCall(String deviceId, String authReqId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/devices/{device_id}/authentication-requests/{auth_req_id}"
            .replaceAll("\\{" + "device_id" + "\\}", localVarApiClient.escapeString(deviceId.toString()))
            .replaceAll("\\{" + "auth_req_id" + "\\}", localVarApiClient.escapeString(authReqId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAuthenticationRequestValidateBeforeCall(String deviceId, String authReqId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling getAuthenticationRequest(Async)");
        }
        
        // verify the required parameter 'authReqId' is set
        if (authReqId == null) {
            throw new ApiException("Missing the required parameter 'authReqId' when calling getAuthenticationRequest(Async)");
        }
        

        okhttp3.Call localVarCall = getAuthenticationRequestCall(deviceId, authReqId, _callback);
        return localVarCall;

    }

    /**
     * Get Authentication Request
     * Get Authentication Request
     * @param deviceId Device id (required)
     * @param authReqId Authentication request id (required)
     * @return AuthenticationRequestModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public AuthenticationRequestModel getAuthenticationRequest(String deviceId, String authReqId) throws ApiException {
        ApiResponse<AuthenticationRequestModel> localVarResp = getAuthenticationRequestWithHttpInfo(deviceId, authReqId);
        return localVarResp.getData();
    }

    /**
     * Get Authentication Request
     * Get Authentication Request
     * @param deviceId Device id (required)
     * @param authReqId Authentication request id (required)
     * @return ApiResponse&lt;AuthenticationRequestModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthenticationRequestModel> getAuthenticationRequestWithHttpInfo(String deviceId, String authReqId) throws ApiException {
        okhttp3.Call localVarCall = getAuthenticationRequestValidateBeforeCall(deviceId, authReqId, null);
        Type localVarReturnType = new TypeToken<AuthenticationRequestModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Authentication Request (asynchronously)
     * Get Authentication Request
     * @param deviceId Device id (required)
     * @param authReqId Authentication request id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAuthenticationRequestAsync(String deviceId, String authReqId, final ApiCallback<AuthenticationRequestModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAuthenticationRequestValidateBeforeCall(deviceId, authReqId, _callback);
        Type localVarReturnType = new TypeToken<AuthenticationRequestModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
