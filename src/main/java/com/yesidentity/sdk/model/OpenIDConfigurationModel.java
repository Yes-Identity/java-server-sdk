/*
 * Yes Identity
 * Welcome to Yes Identity API documentation.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.yesidentity.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * OpenIDConfigurationModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-01-01T07:44:54.268733600+01:00[Europe/Stockholm]")
public class OpenIDConfigurationModel {
  public static final String SERIALIZED_NAME_AUTHORIZATION_ENDPOINT = "authorization_endpoint";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_ENDPOINT)
  private String authorizationEndpoint;

  public static final String SERIALIZED_NAME_TOKEN_ENDPOINT = "token_endpoint";
  @SerializedName(SERIALIZED_NAME_TOKEN_ENDPOINT)
  private String tokenEndpoint;

  public static final String SERIALIZED_NAME_ISSUER = "issuer";
  @SerializedName(SERIALIZED_NAME_ISSUER)
  private String issuer;

  public static final String SERIALIZED_NAME_JWKS_URI = "jwks_uri";
  @SerializedName(SERIALIZED_NAME_JWKS_URI)
  private String jwksUri;

  /**
   * Gets or Sets backchannelTokenDeliveryModesSupported
   */
  @JsonAdapter(BackchannelTokenDeliveryModesSupportedEnum.Adapter.class)
  public enum BackchannelTokenDeliveryModesSupportedEnum {
    POLL("POLL"),
    
    PING("PING");

    private String value;

    BackchannelTokenDeliveryModesSupportedEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BackchannelTokenDeliveryModesSupportedEnum fromValue(String value) {
      for (BackchannelTokenDeliveryModesSupportedEnum b : BackchannelTokenDeliveryModesSupportedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BackchannelTokenDeliveryModesSupportedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BackchannelTokenDeliveryModesSupportedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BackchannelTokenDeliveryModesSupportedEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BackchannelTokenDeliveryModesSupportedEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_BACKCHANNEL_TOKEN_DELIVERY_MODES_SUPPORTED = "backchannel_token_delivery_modes_supported";
  @SerializedName(SERIALIZED_NAME_BACKCHANNEL_TOKEN_DELIVERY_MODES_SUPPORTED)
  private List<BackchannelTokenDeliveryModesSupportedEnum> backchannelTokenDeliveryModesSupported = null;

  /**
   * Gets or Sets backchannelAuthenticationRequestSigningAlgValuesSupported
   */
  @JsonAdapter(BackchannelAuthenticationRequestSigningAlgValuesSupportedEnum.Adapter.class)
  public enum BackchannelAuthenticationRequestSigningAlgValuesSupportedEnum {
    RSA256("RSA256");

    private String value;

    BackchannelAuthenticationRequestSigningAlgValuesSupportedEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BackchannelAuthenticationRequestSigningAlgValuesSupportedEnum fromValue(String value) {
      for (BackchannelAuthenticationRequestSigningAlgValuesSupportedEnum b : BackchannelAuthenticationRequestSigningAlgValuesSupportedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BackchannelAuthenticationRequestSigningAlgValuesSupportedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BackchannelAuthenticationRequestSigningAlgValuesSupportedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BackchannelAuthenticationRequestSigningAlgValuesSupportedEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BackchannelAuthenticationRequestSigningAlgValuesSupportedEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_BACKCHANNEL_AUTHENTICATION_REQUEST_SIGNING_ALG_VALUES_SUPPORTED = "backchannel_authentication_request_signing_alg_values_supported";
  @SerializedName(SERIALIZED_NAME_BACKCHANNEL_AUTHENTICATION_REQUEST_SIGNING_ALG_VALUES_SUPPORTED)
  private List<BackchannelAuthenticationRequestSigningAlgValuesSupportedEnum> backchannelAuthenticationRequestSigningAlgValuesSupported = null;

  /**
   * Gets or Sets scopesSupported
   */
  @JsonAdapter(ScopesSupportedEnum.Adapter.class)
  public enum ScopesSupportedEnum {
    OPENID("openid"),
    
    LOGIN("login"),
    
    AUTHENTICATION("authentication"),
    
    SIGNING("signing"),
    
    PAYMENT("payment");

    private String value;

    ScopesSupportedEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScopesSupportedEnum fromValue(String value) {
      for (ScopesSupportedEnum b : ScopesSupportedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ScopesSupportedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScopesSupportedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScopesSupportedEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ScopesSupportedEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SCOPES_SUPPORTED = "scopes_supported";
  @SerializedName(SERIALIZED_NAME_SCOPES_SUPPORTED)
  private List<ScopesSupportedEnum> scopesSupported = null;

  /**
   * Gets or Sets grantTypesSupported
   */
  @JsonAdapter(GrantTypesSupportedEnum.Adapter.class)
  public enum GrantTypesSupportedEnum {
    URN_OPENID_PARAMS_GRANT_TYPE_CIBA("urn:openid:params:grant-type:ciba"),
    
    CLIENT_CREDENTIALS("client_credentials");

    private String value;

    GrantTypesSupportedEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GrantTypesSupportedEnum fromValue(String value) {
      for (GrantTypesSupportedEnum b : GrantTypesSupportedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GrantTypesSupportedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GrantTypesSupportedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GrantTypesSupportedEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GrantTypesSupportedEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_GRANT_TYPES_SUPPORTED = "grant_types_supported";
  @SerializedName(SERIALIZED_NAME_GRANT_TYPES_SUPPORTED)
  private List<GrantTypesSupportedEnum> grantTypesSupported = null;

  /**
   * Gets or Sets tokenEndpointAuthMethodsSupported
   */
  @JsonAdapter(TokenEndpointAuthMethodsSupportedEnum.Adapter.class)
  public enum TokenEndpointAuthMethodsSupportedEnum {
    PRIVATE_KEY_JWT("private_key_jwt");

    private String value;

    TokenEndpointAuthMethodsSupportedEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TokenEndpointAuthMethodsSupportedEnum fromValue(String value) {
      for (TokenEndpointAuthMethodsSupportedEnum b : TokenEndpointAuthMethodsSupportedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TokenEndpointAuthMethodsSupportedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TokenEndpointAuthMethodsSupportedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TokenEndpointAuthMethodsSupportedEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TokenEndpointAuthMethodsSupportedEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TOKEN_ENDPOINT_AUTH_METHODS_SUPPORTED = "token_endpoint_auth_methods_supported";
  @SerializedName(SERIALIZED_NAME_TOKEN_ENDPOINT_AUTH_METHODS_SUPPORTED)
  private List<TokenEndpointAuthMethodsSupportedEnum> tokenEndpointAuthMethodsSupported = null;

  /**
   * Gets or Sets tokenEndpointAuthSigningAlgValuesSupported
   */
  @JsonAdapter(TokenEndpointAuthSigningAlgValuesSupportedEnum.Adapter.class)
  public enum TokenEndpointAuthSigningAlgValuesSupportedEnum {
    RSA256("RSA256");

    private String value;

    TokenEndpointAuthSigningAlgValuesSupportedEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TokenEndpointAuthSigningAlgValuesSupportedEnum fromValue(String value) {
      for (TokenEndpointAuthSigningAlgValuesSupportedEnum b : TokenEndpointAuthSigningAlgValuesSupportedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TokenEndpointAuthSigningAlgValuesSupportedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TokenEndpointAuthSigningAlgValuesSupportedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TokenEndpointAuthSigningAlgValuesSupportedEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TokenEndpointAuthSigningAlgValuesSupportedEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TOKEN_ENDPOINT_AUTH_SIGNING_ALG_VALUES_SUPPORTED = "token_endpoint_auth_signing_alg_values_supported";
  @SerializedName(SERIALIZED_NAME_TOKEN_ENDPOINT_AUTH_SIGNING_ALG_VALUES_SUPPORTED)
  private List<TokenEndpointAuthSigningAlgValuesSupportedEnum> tokenEndpointAuthSigningAlgValuesSupported = null;

  public OpenIDConfigurationModel() { 
  }

  public OpenIDConfigurationModel authorizationEndpoint(String authorizationEndpoint) {
    
    this.authorizationEndpoint = authorizationEndpoint;
    return this;
  }

   /**
   * The authorization endpoint
   * @return authorizationEndpoint
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The authorization endpoint")

  public String getAuthorizationEndpoint() {
    return authorizationEndpoint;
  }


  public void setAuthorizationEndpoint(String authorizationEndpoint) {
    this.authorizationEndpoint = authorizationEndpoint;
  }


  public OpenIDConfigurationModel tokenEndpoint(String tokenEndpoint) {
    
    this.tokenEndpoint = tokenEndpoint;
    return this;
  }

   /**
   * The token endpoint
   * @return tokenEndpoint
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The token endpoint")

  public String getTokenEndpoint() {
    return tokenEndpoint;
  }


  public void setTokenEndpoint(String tokenEndpoint) {
    this.tokenEndpoint = tokenEndpoint;
  }


  public OpenIDConfigurationModel issuer(String issuer) {
    
    this.issuer = issuer;
    return this;
  }

   /**
   * The issuer to expect for all received ID tokens
   * @return issuer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The issuer to expect for all received ID tokens")

  public String getIssuer() {
    return issuer;
  }


  public void setIssuer(String issuer) {
    this.issuer = issuer;
  }


  public OpenIDConfigurationModel jwksUri(String jwksUri) {
    
    this.jwksUri = jwksUri;
    return this;
  }

   /**
   * URL of the OP&#39;s JSON Web Key Set [JWK] document
   * @return jwksUri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "URL of the OP's JSON Web Key Set [JWK] document")

  public String getJwksUri() {
    return jwksUri;
  }


  public void setJwksUri(String jwksUri) {
    this.jwksUri = jwksUri;
  }


  public OpenIDConfigurationModel backchannelTokenDeliveryModesSupported(List<BackchannelTokenDeliveryModesSupportedEnum> backchannelTokenDeliveryModesSupported) {
    
    this.backchannelTokenDeliveryModesSupported = backchannelTokenDeliveryModesSupported;
    return this;
  }

  public OpenIDConfigurationModel addBackchannelTokenDeliveryModesSupportedItem(BackchannelTokenDeliveryModesSupportedEnum backchannelTokenDeliveryModesSupportedItem) {
    if (this.backchannelTokenDeliveryModesSupported == null) {
      this.backchannelTokenDeliveryModesSupported = new ArrayList<>();
    }
    this.backchannelTokenDeliveryModesSupported.add(backchannelTokenDeliveryModesSupportedItem);
    return this;
  }

   /**
   * JSON array containing one or more of the following values: poll, ping and push
   * @return backchannelTokenDeliveryModesSupported
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "JSON array containing one or more of the following values: poll, ping and push")

  public List<BackchannelTokenDeliveryModesSupportedEnum> getBackchannelTokenDeliveryModesSupported() {
    return backchannelTokenDeliveryModesSupported;
  }


  public void setBackchannelTokenDeliveryModesSupported(List<BackchannelTokenDeliveryModesSupportedEnum> backchannelTokenDeliveryModesSupported) {
    this.backchannelTokenDeliveryModesSupported = backchannelTokenDeliveryModesSupported;
  }


  public OpenIDConfigurationModel backchannelAuthenticationRequestSigningAlgValuesSupported(List<BackchannelAuthenticationRequestSigningAlgValuesSupportedEnum> backchannelAuthenticationRequestSigningAlgValuesSupported) {
    
    this.backchannelAuthenticationRequestSigningAlgValuesSupported = backchannelAuthenticationRequestSigningAlgValuesSupported;
    return this;
  }

  public OpenIDConfigurationModel addBackchannelAuthenticationRequestSigningAlgValuesSupportedItem(BackchannelAuthenticationRequestSigningAlgValuesSupportedEnum backchannelAuthenticationRequestSigningAlgValuesSupportedItem) {
    if (this.backchannelAuthenticationRequestSigningAlgValuesSupported == null) {
      this.backchannelAuthenticationRequestSigningAlgValuesSupported = new ArrayList<>();
    }
    this.backchannelAuthenticationRequestSigningAlgValuesSupported.add(backchannelAuthenticationRequestSigningAlgValuesSupportedItem);
    return this;
  }

   /**
   * JSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for signed authentications requests
   * @return backchannelAuthenticationRequestSigningAlgValuesSupported
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "JSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for signed authentications requests")

  public List<BackchannelAuthenticationRequestSigningAlgValuesSupportedEnum> getBackchannelAuthenticationRequestSigningAlgValuesSupported() {
    return backchannelAuthenticationRequestSigningAlgValuesSupported;
  }


  public void setBackchannelAuthenticationRequestSigningAlgValuesSupported(List<BackchannelAuthenticationRequestSigningAlgValuesSupportedEnum> backchannelAuthenticationRequestSigningAlgValuesSupported) {
    this.backchannelAuthenticationRequestSigningAlgValuesSupported = backchannelAuthenticationRequestSigningAlgValuesSupported;
  }


  public OpenIDConfigurationModel scopesSupported(List<ScopesSupportedEnum> scopesSupported) {
    
    this.scopesSupported = scopesSupported;
    return this;
  }

  public OpenIDConfigurationModel addScopesSupportedItem(ScopesSupportedEnum scopesSupportedItem) {
    if (this.scopesSupported == null) {
      this.scopesSupported = new ArrayList<>();
    }
    this.scopesSupported.add(scopesSupportedItem);
    return this;
  }

   /**
   * JSON array containing a list of scopes that this server supports
   * @return scopesSupported
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "JSON array containing a list of scopes that this server supports")

  public List<ScopesSupportedEnum> getScopesSupported() {
    return scopesSupported;
  }


  public void setScopesSupported(List<ScopesSupportedEnum> scopesSupported) {
    this.scopesSupported = scopesSupported;
  }


  public OpenIDConfigurationModel grantTypesSupported(List<GrantTypesSupportedEnum> grantTypesSupported) {
    
    this.grantTypesSupported = grantTypesSupported;
    return this;
  }

  public OpenIDConfigurationModel addGrantTypesSupportedItem(GrantTypesSupportedEnum grantTypesSupportedItem) {
    if (this.grantTypesSupported == null) {
      this.grantTypesSupported = new ArrayList<>();
    }
    this.grantTypesSupported.add(grantTypesSupportedItem);
    return this;
  }

   /**
   * JSON array containing a list of grant types that this server supports
   * @return grantTypesSupported
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "JSON array containing a list of grant types that this server supports")

  public List<GrantTypesSupportedEnum> getGrantTypesSupported() {
    return grantTypesSupported;
  }


  public void setGrantTypesSupported(List<GrantTypesSupportedEnum> grantTypesSupported) {
    this.grantTypesSupported = grantTypesSupported;
  }


  public OpenIDConfigurationModel tokenEndpointAuthMethodsSupported(List<TokenEndpointAuthMethodsSupportedEnum> tokenEndpointAuthMethodsSupported) {
    
    this.tokenEndpointAuthMethodsSupported = tokenEndpointAuthMethodsSupported;
    return this;
  }

  public OpenIDConfigurationModel addTokenEndpointAuthMethodsSupportedItem(TokenEndpointAuthMethodsSupportedEnum tokenEndpointAuthMethodsSupportedItem) {
    if (this.tokenEndpointAuthMethodsSupported == null) {
      this.tokenEndpointAuthMethodsSupported = new ArrayList<>();
    }
    this.tokenEndpointAuthMethodsSupported.add(tokenEndpointAuthMethodsSupportedItem);
    return this;
  }

   /**
   * JSON array containing a list of Client Authentication methods supported by this Token Endpoint
   * @return tokenEndpointAuthMethodsSupported
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "JSON array containing a list of Client Authentication methods supported by this Token Endpoint")

  public List<TokenEndpointAuthMethodsSupportedEnum> getTokenEndpointAuthMethodsSupported() {
    return tokenEndpointAuthMethodsSupported;
  }


  public void setTokenEndpointAuthMethodsSupported(List<TokenEndpointAuthMethodsSupportedEnum> tokenEndpointAuthMethodsSupported) {
    this.tokenEndpointAuthMethodsSupported = tokenEndpointAuthMethodsSupported;
  }


  public OpenIDConfigurationModel tokenEndpointAuthSigningAlgValuesSupported(List<TokenEndpointAuthSigningAlgValuesSupportedEnum> tokenEndpointAuthSigningAlgValuesSupported) {
    
    this.tokenEndpointAuthSigningAlgValuesSupported = tokenEndpointAuthSigningAlgValuesSupported;
    return this;
  }

  public OpenIDConfigurationModel addTokenEndpointAuthSigningAlgValuesSupportedItem(TokenEndpointAuthSigningAlgValuesSupportedEnum tokenEndpointAuthSigningAlgValuesSupportedItem) {
    if (this.tokenEndpointAuthSigningAlgValuesSupported == null) {
      this.tokenEndpointAuthSigningAlgValuesSupported = new ArrayList<>();
    }
    this.tokenEndpointAuthSigningAlgValuesSupported.add(tokenEndpointAuthSigningAlgValuesSupportedItem);
    return this;
  }

   /**
   * JSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for client authentications at token endpoint.
   * @return tokenEndpointAuthSigningAlgValuesSupported
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "JSON array containing a list of the JWS signing algorithms (alg values) supported by the OP for client authentications at token endpoint.")

  public List<TokenEndpointAuthSigningAlgValuesSupportedEnum> getTokenEndpointAuthSigningAlgValuesSupported() {
    return tokenEndpointAuthSigningAlgValuesSupported;
  }


  public void setTokenEndpointAuthSigningAlgValuesSupported(List<TokenEndpointAuthSigningAlgValuesSupportedEnum> tokenEndpointAuthSigningAlgValuesSupported) {
    this.tokenEndpointAuthSigningAlgValuesSupported = tokenEndpointAuthSigningAlgValuesSupported;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OpenIDConfigurationModel openIDConfiguration = (OpenIDConfigurationModel) o;
    return Objects.equals(this.authorizationEndpoint, openIDConfiguration.authorizationEndpoint) &&
        Objects.equals(this.tokenEndpoint, openIDConfiguration.tokenEndpoint) &&
        Objects.equals(this.issuer, openIDConfiguration.issuer) &&
        Objects.equals(this.jwksUri, openIDConfiguration.jwksUri) &&
        Objects.equals(this.backchannelTokenDeliveryModesSupported, openIDConfiguration.backchannelTokenDeliveryModesSupported) &&
        Objects.equals(this.backchannelAuthenticationRequestSigningAlgValuesSupported, openIDConfiguration.backchannelAuthenticationRequestSigningAlgValuesSupported) &&
        Objects.equals(this.scopesSupported, openIDConfiguration.scopesSupported) &&
        Objects.equals(this.grantTypesSupported, openIDConfiguration.grantTypesSupported) &&
        Objects.equals(this.tokenEndpointAuthMethodsSupported, openIDConfiguration.tokenEndpointAuthMethodsSupported) &&
        Objects.equals(this.tokenEndpointAuthSigningAlgValuesSupported, openIDConfiguration.tokenEndpointAuthSigningAlgValuesSupported);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorizationEndpoint, tokenEndpoint, issuer, jwksUri, backchannelTokenDeliveryModesSupported, backchannelAuthenticationRequestSigningAlgValuesSupported, scopesSupported, grantTypesSupported, tokenEndpointAuthMethodsSupported, tokenEndpointAuthSigningAlgValuesSupported);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OpenIDConfigurationModel {\n");
    sb.append("    authorizationEndpoint: ").append(toIndentedString(authorizationEndpoint)).append("\n");
    sb.append("    tokenEndpoint: ").append(toIndentedString(tokenEndpoint)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    jwksUri: ").append(toIndentedString(jwksUri)).append("\n");
    sb.append("    backchannelTokenDeliveryModesSupported: ").append(toIndentedString(backchannelTokenDeliveryModesSupported)).append("\n");
    sb.append("    backchannelAuthenticationRequestSigningAlgValuesSupported: ").append(toIndentedString(backchannelAuthenticationRequestSigningAlgValuesSupported)).append("\n");
    sb.append("    scopesSupported: ").append(toIndentedString(scopesSupported)).append("\n");
    sb.append("    grantTypesSupported: ").append(toIndentedString(grantTypesSupported)).append("\n");
    sb.append("    tokenEndpointAuthMethodsSupported: ").append(toIndentedString(tokenEndpointAuthMethodsSupported)).append("\n");
    sb.append("    tokenEndpointAuthSigningAlgValuesSupported: ").append(toIndentedString(tokenEndpointAuthSigningAlgValuesSupported)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

