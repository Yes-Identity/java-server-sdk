/*
 * Yes Identity
 * Welcome to Yes Identity API documentation.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.yesidentity.sdk.api;

import com.yesidentity.sdk.invoker.ApiException;
import com.yesidentity.sdk.model.DeviceModel;
import com.yesidentity.sdk.model.ErrorResponseModel;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DevicesApi
 */
@Ignore
public class DevicesApiTest {

    private final DevicesApi api = new DevicesApi();

    
    /**
     * Activate Device
     *
     * Activate Device
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void activateDeviceTest() throws ApiException {
        String username = null;
        String deviceId = null;
                DeviceModel response = api.activateDevice(username, deviceId);
        // TODO: test validations
    }
    
    /**
     * Block Device
     *
     * Block Device
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void blockDeviceTest() throws ApiException {
        String username = null;
        String deviceId = null;
                DeviceModel response = api.blockDevice(username, deviceId);
        // TODO: test validations
    }
    
    /**
     * Create Device
     *
     * Create Device
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDeviceTest() throws ApiException {
        String username = null;
        DeviceModel deviceModel = null;
                DeviceModel response = api.createDevice(username, deviceModel);
        // TODO: test validations
    }
    
    /**
     * Deactivate Device
     *
     * Deactivate Device
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deactivateDeviceTest() throws ApiException {
        String username = null;
        String deviceId = null;
                DeviceModel response = api.deactivateDevice(username, deviceId);
        // TODO: test validations
    }
    
    /**
     * Delete Device
     *
     * Delete Device
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDeviceTest() throws ApiException {
        String username = null;
        String deviceId = null;
                api.deleteDevice(username, deviceId);
        // TODO: test validations
    }
    
    /**
     * Get Device
     *
     * Get Device
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDeviceTest() throws ApiException {
        String username = null;
        String deviceId = null;
                DeviceModel response = api.getDevice(username, deviceId);
        // TODO: test validations
    }
    
    /**
     * Get Devices
     *
     * Get Devices
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDevicesTest() throws ApiException {
        String username = null;
        Boolean active = null;
        Boolean blocked = null;
                List<DeviceModel> response = api.getDevices(username, active, blocked);
        // TODO: test validations
    }
    
    /**
     * Unblock Device
     *
     * Unblock Device
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unblockDeviceTest() throws ApiException {
        String username = null;
        String deviceId = null;
                DeviceModel response = api.unblockDevice(username, deviceId);
        // TODO: test validations
    }
    
}
